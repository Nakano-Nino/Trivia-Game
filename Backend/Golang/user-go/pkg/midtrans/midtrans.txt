package handlers

import (
	"net/http"

	midtransdto "github.com/Nakano-Nino/Trivia-Game/dto/midtrans"
	dto "github.com/Nakano-Nino/Trivia-Game/dto/result"
	fp "github.com/amonsat/fullname_parser"
	"github.com/gin-gonic/gin"
	"github.com/midtrans/midtrans-go"
	"github.com/midtrans/midtrans-go/snap"
)

var s snap.Client

func CreateTransaction(c *gin.Context, input midtransdto.MidtransRequest) {
	err := c.ShouldBindJSON(&input)
	if err != nil {
		response := dto.ErrorResult{Code: http.StatusBadRequest, Message: err.Error()}
		c.JSON(http.StatusBadRequest, response)
		return
	}

	parsedName := fp.ParseFullname(input.Name)
	firstName := parsedName.First
	lastName := parsedName.Last

	req := &snap.Request{
		TransactionDetails: midtrans.TransactionDetails{
			OrderID:  "MID-User-" + input.UserId + "-" + input.ItemId,
			GrossAmt: int64(input.Amount),
		},
		CreditCard: &snap.CreditCardDetails{
			Secure: true,
		},
		CustomerDetail: &midtrans.CustomerDetails{
			FName: firstName,
			LName: lastName,
			Email: input.Email,
		},
		EnabledPayments: snap.AllSnapPaymentType,
	}
	
	resp, err := s.CreateTransaction(req)
	if err != nil {
		response := dto.ErrorResult{Code: http.StatusBadRequest, Message: err.Error()}
		c.JSON(http.StatusBadRequest, response)
		return
	}

	midtransResponse := midtransdto.MidtransResponse{
		Token: resp.Token,
		Url:   resp.RedirectURL,
	}

	c.JSON(http.StatusOK, midtransResponse)
}