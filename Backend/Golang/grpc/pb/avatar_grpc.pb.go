// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: avatar.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Avatar_GetOneAvatar_FullMethodName = "/protogrpc.Avatar/GetOneAvatar"
	Avatar_GetAvatars_FullMethodName   = "/protogrpc.Avatar/GetAvatars"
)

// AvatarClient is the client API for Avatar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvatarClient interface {
	GetOneAvatar(ctx context.Context, in *Name, opts ...grpc.CallOption) (*ResponseOneAvatar, error)
	GetAvatars(ctx context.Context, in *EmptyAvatar, opts ...grpc.CallOption) (*ResponseAvatars, error)
}

type avatarClient struct {
	cc grpc.ClientConnInterface
}

func NewAvatarClient(cc grpc.ClientConnInterface) AvatarClient {
	return &avatarClient{cc}
}

func (c *avatarClient) GetOneAvatar(ctx context.Context, in *Name, opts ...grpc.CallOption) (*ResponseOneAvatar, error) {
	out := new(ResponseOneAvatar)
	err := c.cc.Invoke(ctx, Avatar_GetOneAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avatarClient) GetAvatars(ctx context.Context, in *EmptyAvatar, opts ...grpc.CallOption) (*ResponseAvatars, error) {
	out := new(ResponseAvatars)
	err := c.cc.Invoke(ctx, Avatar_GetAvatars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvatarServer is the server API for Avatar service.
// All implementations must embed UnimplementedAvatarServer
// for forward compatibility
type AvatarServer interface {
	GetOneAvatar(context.Context, *Name) (*ResponseOneAvatar, error)
	GetAvatars(context.Context, *EmptyAvatar) (*ResponseAvatars, error)
	mustEmbedUnimplementedAvatarServer()
}

// UnimplementedAvatarServer must be embedded to have forward compatible implementations.
type UnimplementedAvatarServer struct {
}

func (UnimplementedAvatarServer) GetOneAvatar(context.Context, *Name) (*ResponseOneAvatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneAvatar not implemented")
}
func (UnimplementedAvatarServer) GetAvatars(context.Context, *EmptyAvatar) (*ResponseAvatars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatars not implemented")
}
func (UnimplementedAvatarServer) mustEmbedUnimplementedAvatarServer() {}

// UnsafeAvatarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvatarServer will
// result in compilation errors.
type UnsafeAvatarServer interface {
	mustEmbedUnimplementedAvatarServer()
}

func RegisterAvatarServer(s grpc.ServiceRegistrar, srv AvatarServer) {
	s.RegisterService(&Avatar_ServiceDesc, srv)
}

func _Avatar_GetOneAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServer).GetOneAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Avatar_GetOneAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServer).GetOneAvatar(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _Avatar_GetAvatars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvatarServer).GetAvatars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Avatar_GetAvatars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvatarServer).GetAvatars(ctx, req.(*EmptyAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

// Avatar_ServiceDesc is the grpc.ServiceDesc for Avatar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Avatar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protogrpc.Avatar",
	HandlerType: (*AvatarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOneAvatar",
			Handler:    _Avatar_GetOneAvatar_Handler,
		},
		{
			MethodName: "GetAvatars",
			Handler:    _Avatar_GetAvatars_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "avatar.proto",
}
